const timeInterval = 3e5,
  customExpiryTime = 18e5;
let hostUrl = "",
  globalTrackingToken = "",
  commonPageDetails = [],
  globalUserEmail = "",
  globalDomain = "";
const getHostUrl = (e = "prod") => {
    hostUrl =
      "staging" === e
        ? "https://core.salesgearqe.com"
        : "https://core.salesgear.io";
  },
  getDomain = () => {
    const e = window?.location?.hostname,
      t = e?.replace("www", "").replace("app", "");
    globalDomain = t;
  },
  getBrowserName = () =>
    (function () {
      var e = function (e) {
        return e.test(window?.navigator?.userAgent);
      };
      switch (!0) {
        case e(/edg/i):
          return "Microsoft Edge";
        case e(/trident/i):
          return "Microsoft Internet Explorer";
        case e(/firefox|fxios/i):
          return "Mozilla Firefox";
        case e(/opr\//i):
          return "Opera";
        case e(/ucbrowser/i):
          return "UC Browser";
        case e(/samsungbrowser/i):
          return "Samsung Browser";
        case e(/chrome|chromium|crios/i):
          return "Google Chrome";
        case e(/safari/i):
          return "Apple Safari";
        default:
          return "Other";
      }
    })(),
  getIsDesktopOrNot = () => {
    const e = navigator?.userAgent || window?.opera;
    return !(
      /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series([46])0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(
        e
      ) ||
      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br([ev])w|bumb|bw-([nu])|c55\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do([cp])o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly([-_])|g1 u|g560|gene|gf-5|g-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd-([mpt])|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c([- _agpst])|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac([ \-/])|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja([tv])a|jbro|jemu|jigs|kddi|keji|kgt([ /])|klon|kpt |kwc-|kyo([ck])|le(no|xi)|lg( g|\/([klu])|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t([- ov])|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30([02])|n50([025])|n7(0([01])|10)|ne(([cm])-|on|tf|wf|wg|wt)|nok([6i])|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan([adt])|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\/|se(c([-01])|47|mc|nd|ri)|sgh-|shar|sie([-m])|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel([im])|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c([- ])|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(
        e?.substr(0, 4)
      )
    );
  },
  getTimeInString = (e = "") => {
    if (e) {
      e = Math.abs(e);
      let t = Math.trunc(e / 60)?.toString();
      t = ("0" + t)?.slice(-2);
      let a = ("0" + (e % 60))?.slice(-2);
      return t + ":" + a;
    }
  },
  getUserTimeZone = () => {
    const e = new Date();
    if (e) {
      const t = getTimeInString(e?.getTimezoneOffset());
      let a = "+";
      return e?.getTimezoneOffset() > 0 && (a = "-"), "UTC" + a + t;
    }
  },
  getInteractionDetails = (e = {}) => {
    if (e) {
      const t = "A" === e?.tagName ? "Link" : e?.tagName;
      let a = "";
      return (
        "link" === t?.toLowerCase()
          ? (a = e?.href || "")
          : ((a =
              e?.outerText ||
              e?.innerText ||
              e?.textContent ||
              e?.id ||
              e.className ||
              ""),
            (a = "string" != typeof a ? t : a),
            (a = a?.length > 20 ? a.substring(0, 20) : a)),
        { interactionDetails: a, interactionType: t }
      );
    }
  },
  getEventDetails = (e = {}, t = "") => {
    const { interactionDetails: a, interactionType: o } =
      getInteractionDetails(e) || {};
    return {
      pageUrl: t,
      interactionType: o,
      interactionDetails: a,
      timeStamp: new Date()
    };
  },
  constructEventDetails = (e = {}, t = "") => ({
    eventDetails: [getEventDetails(e, t)]
  }),
  getPageDetails = () => ({
    pageUrl: window?.location?.href || "",
    startTime: new Date(),
    referrer: document?.referrer
  }),
  constructPageDetails = (e = []) => ({
    pageDetails: [getPageDetails(), ...e]
  }),
  constructUserDetails = (e = "") => {
    const t = window?.location?.href || "";
    let a = new URL(t);
    a && (a = a?.hostname?.replace("www.", ""));
    const o = getIsDesktopOrNot(),
      n = new URLSearchParams(window.location.search).get("sgwtc") || "";
    return (
      n && localStorage.setItem("sgwtc", n),
      {
        userId: getCookie("SG_CUSTOM_USER_IDENTITY"),
        userEmail: globalUserEmail,
        trackingToken: globalTrackingToken,
        sessionId: e,
        salesgearEmailParam: n || localStorage.getItem("sgwtc"),
        domain: a,
        browserName: (function () {
          var e = function (e) {
            return e.test(window?.navigator?.userAgent);
          };
          switch (!0) {
            case e(/edg/i):
              return "Microsoft Edge";
            case e(/trident/i):
              return "Microsoft Internet Explorer";
            case e(/firefox|fxios/i):
              return "Mozilla Firefox";
            case e(/opr\//i):
              return "Opera";
            case e(/ucbrowser/i):
              return "UC Browser";
            case e(/samsungbrowser/i):
              return "Samsung Browser";
            case e(/chrome|chromium|crios/i):
              return "Google Chrome";
            case e(/safari/i):
              return "Apple Safari";
            default:
              return "Other";
          }
        })(),
        desktop: o,
        timeZone: {
          name: Intl.DateTimeFormat().resolvedOptions().timeZone,
          value: getUserTimeZone()
        }
      }
    );
  },
  getCookie = (e = "") => {
    if (e) {
      var t = document.cookie.match(
        RegExp(
          "(?:^|;\\s*)" +
            (e.replace(/([.*+?\^$(){}|\[\]\/\\])/g, "\\$1") + "=([^;]*)")
        )
      );
      return t && t?.length > 0 ? t?.[1] : null;
    }
    return null;
  },
  constructSessionId = () => {
    let e = getCookie("SG_CUST_SESSIONID") || "",
      t = !1;
    if (!e) {
      (t = !0),
        (e = Date.now().toString(36) + Math.random().toString(36).substring(2));
      const a = new Date();
      a.setTime(a?.getTime() + 18e5),
        (document.cookie = `SG_CUST_SESSIONID=${e}; expires=${a.toUTCString()}; path=/; domain=${globalDomain}`);
    }
    return { sessionID: e, sessionExpired: t };
  },
  constructUserId = (e = "") => {
    let t = getCookie("SG_CUSTOM_USER_IDENTITY") || "";
    t ||
      ((t = e),
      (document.cookie = `SG_CUSTOM_USER_IDENTITY=${t}; path=/; domain=${globalDomain}`));
  },
  checkAllPageDetailsAndRemoveInvalid = (e = {}) => (
    e?.pageDetails?.length > 0 &&
      e.pageDetails.map((t, a) => {
        t?.endTime || (commonPageDetails.push(t), e.pageDetails.splice(a, 1));
      }),
    e
  ),
  makeAPIForPage = (e = !1) => {
    if (hostUrl) {
      const t = `${hostUrl}/wt/addData`,
        a = JSON.parse(localStorage.getItem("SG_CUSTOM_PAGE_DETAIL") || "{}");
      !e && addEndDateForPrevPage(a);
      const o = checkAllPageDetailsAndRemoveInvalid(a);
      (o.userEmail = globalUserEmail),
        o &&
          Object.keys(o)?.length > 0 &&
          o?.pageDetails?.length > 0 &&
          (navigator.sendBeacon(t, JSON.stringify(o)),
          localStorage.removeItem("SG_CUSTOM_PAGE_DETAIL"));
    }
  },
  makeAPIForEvent = () => {
    if (hostUrl) {
      const e = `${hostUrl}/wt/addData`,
        t = JSON.parse(localStorage.getItem("SG_CUSTOM_EVENT_DETAIL") || "{}");
      (t.userEmail = globalUserEmail),
        t &&
          Object.keys(t)?.length > 0 &&
          t?.eventDetails?.length > 0 &&
          (navigator.sendBeacon(e, JSON.stringify(t)),
          localStorage.removeItem("SG_CUSTOM_EVENT_DETAIL"));
    }
  },
  addEndDateForPrevPage = (e = {}) => {
    const t = e?.pageDetails || [];
    if ((t?.length || 0) > 0) return (t[0].endTime = new Date()), t;
  },
  getAndStoreEventDetails = (e = {}, t = "") => {
    const { sessionID: a = "" } = constructSessionId() || {},
      o = constructUserDetails(a),
      n = constructEventDetails(e, t);
    let i = JSON.parse(localStorage.getItem("SG_CUSTOM_EVENT_DETAIL") || "{}");
    if (i && Object.keys(i).length > 0) {
      if (i.eventDetails?.length >= 5) return void makeAPIForEvent();
      {
        const a = getEventDetails(e, t);
        i.eventDetails && i.eventDetails.unshift(a),
          (i.pageDetails = []),
          (i.eventDetails = [...i.eventDetails]);
      }
    } else i = { ...o, ...n };
    (i.userEmail = globalUserEmail),
      localStorage.setItem("SG_CUSTOM_EVENT_DETAIL", JSON.stringify(i));
  },
  getAndStorePageDetails = () => {
    const { sessionID: e = "" } = constructSessionId() || {},
      t = constructUserDetails(e);
    let a = JSON.parse(localStorage.getItem("SG_CUSTOM_PAGE_DETAIL") || "{}");
    const o = constructPageDetails(commonPageDetails);
    if (a && Object.keys(a).length > 0)
      if (
        (commonPageDetails?.length > 0 &&
          commonPageDetails.map(e => (e.endTime = new Date())),
        a.pageDetails?.length >= 5)
      )
        makeAPIForPage(), (a = { ...t, ...o });
      else {
        const e = getPageDetails();
        addEndDateForPrevPage(a),
          (a.eventDetails = []),
          (a.pageDetails = a.pageDetails || []),
          a.pageDetails.unshift(e),
          (a.pageDetails = [...a.pageDetails, ...commonPageDetails]);
      }
    else a = { ...t, ...o };
    (commonPageDetails = []),
      (a.userEmail = globalUserEmail),
      localStorage.setItem("SG_CUSTOM_PAGE_DETAIL", JSON.stringify(a));
  },
  onTabCloseOrSwitchTab = () => {
    document.addEventListener("visibilitychange", function () {
      "hidden" === document.visibilityState &&
        (makeAPIForEvent(), makeAPIForPage());
    });
  },
  resetAndMakeAPIOnTimeInterval = () => {
    setInterval(() => {
      const { sessionExpired: e = !1 } = constructSessionId();
      makeAPIForPage(!e), makeAPIForEvent();
    }, 3e5);
  },
  detectClickOnElement = () => {
    document.onclick = e => {
      void 0 === e && (e = window?.event);
      const t = "target" in e ? e?.target : e?.srcElement;
      setTimeout(() => {
        const e = window?.location?.href;
        getAndStoreEventDetails(t, e);
      }, 1e3);
    };
  },
  observeUrlChange = () => {
    let e = document?.location?.href;
    const t = setInterval(() => {
      const a = document.querySelector("body"),
        o = new MutationObserver(t => {
          e !== document?.location?.href &&
            (getAndStorePageDetails(), (e = document?.location?.href));
        });
      a && (o.observe(a, { childList: !0, subtree: !0 }), clearInterval(t));
    }, 500);
  },
  makeAPIOnInstall = async () => {
    if (hostUrl) {
      const e = `${hostUrl}/wt/addData`,
        { sessionID: t = "" } = constructSessionId() || {};
      let a = constructUserDetails(t);
      (a = JSON.stringify({ ...a, scriptInstalled: !0 })),
        a && Object.keys(a)?.length > 0 && navigator.sendBeacon(e, a);
    }
  },
  randomStringGeneration = (e = 10) => {
    const t =
      "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghiklmnopqrstuvwxyz".split("");
    e || (e = Math.floor(Math.random() * t?.length));
    let a = "";
    for (let o = 0; o < e; o++) a += t[Math.floor(Math.random() * t?.length)];
    return `${a}-${Date.now()}`;
  },
  constructUserIdAndInstallScript = () => {
    const e = localStorage.getItem("SG_CUSTOM_USER_IDENTITY") || "";
    if (e)
      localStorage.removeItem("SG_CUSTOM_USER_IDENTITY"), constructUserId(e);
    else {
      const e = randomStringGeneration(10);
      constructUserId(e), makeAPIOnInstall();
    }
  };
var SG_CUSTOM_SCRIPT = SG_CUSTOM_SCRIPT || {
  init(e, t) {
    observeUrlChange(),
      (globalTrackingToken = e),
      getHostUrl(t),
      getDomain(),
      constructUserIdAndInstallScript(),
      getAndStorePageDetails(),
      (document.onclick = e => {
        void 0 === e && (e = window?.event);
        const t = "target" in e ? e?.target : e?.srcElement;
        setTimeout(() => {
          const e = window?.location?.href;
          getAndStoreEventDetails(t, e);
        }, 1e3);
      }),
      setInterval(() => {
        const { sessionExpired: e = !1 } = constructSessionId();
        makeAPIForPage(!e), makeAPIForEvent();
      }, 3e5),
      document.addEventListener("visibilitychange", function () {
        "hidden" === document.visibilityState &&
          (makeAPIForEvent(), makeAPIForPage());
      });
  },
  identify(e) {
    globalUserEmail = e;
  }
};
window.sg = SG_CUSTOM_SCRIPT;
